#!/usr/bin/env python3

# Multiset diffing, so that the output contains exactly those lines
# that appear in one file but not the other. (appearing multiple
# times if multiple copies are missing)
#
# You can *vaguely* approximate this with
#      diff <(LC_ALL=C sort a.txt) <(LC_ALL=C sort b.txt)
# but even that still sometimes gets confused.
#
# The comparison operator is a natural sort with some properties optimized
# for our use case in debugging rsp2's potentials.  (e.g. whitespace is
# normalized, and words that look like floats are compared using IEEE-754
# semantics except that NaNs are grouped together).
# Use together with `./filter-out`.

import sys

try: import colored
except ImportError: colored = None

def main():
    import argparse
    p = argparse.ArgumentParser(
        description='diff two files as multisets of lines',
    )
    p.add_argument('FILE_A')
    p.add_argument('FILE_B')
    p.add_argument('-l', '--lexical', action='store_true', help='disable natural sorting and compare lines lexically')
    p.add_argument('-e', '--equal', action='store_true', help='include lines that are shared')
    p.add_argument('--color', choices=['never', 'always', 'auto'], default = 'auto')
    args = p.parse_args()

    if args.lexical:
        key_func = lambda a: a
    else:
        key_func = natural_key

    if args.color == 'auto':
        use_color = sys.stdout.isatty() and colored is not None
    elif args.color == 'always':
        if not colored:
            die('please install the colored package')
        use_color = True
    elif args.color == 'never':
        use_color = False
    else:
        assert False, 'complete switch'

    lines_a = sorted(open(args.FILE_A), key=key_func)
    lines_b = sorted(open(args.FILE_B), key=key_func)

    diff = sorted_diff(lines_a, lines_b, emit_eq=args.equal, key=key_func)

    format_diff(diff, use_color, file=sys.stdout)

def sorted_diff(a, b, emit_eq, key=lambda a: a):
    DONE = object()
    def maybe_next(it):
        try:
            value = next(it)
        except StopIteration:
            return DONE, None
        return value, key(value)

    a = iter(a)
    b = iter(b)
    next_a, key_a = maybe_next(a)
    next_b, key_b = maybe_next(b)
    while next_a is not DONE and next_b is not DONE:
        if key_a < key_b:
            yield ('<', next_a)
            next_a, key_a = maybe_next(a)
        elif key_a > key_b:
            yield ('>', next_b)
            next_b, key_b = maybe_next(b)
        elif key_a == key_b:
            if emit_eq:
                yield ('=', next_a)
            next_a, key_a = maybe_next(a)
            next_b, key_b = maybe_next(b)
        else:
            raise ValueError("input does not obey a total order")

    if next_a is not DONE:
        yield ('<', next_a)
        yield from (('<', x) for x in a)
    if next_b is not DONE:
        yield ('>', next_b)
        yield from (('>', x) for x in b)

def format_diff(diff, use_color, file):
    if use_color:
        side_formatter = {
            '<': (lambda s: colored.stylize('< ' + s, colored.fg('red'))),
            '>': (lambda s: colored.stylize('> ' + s, colored.fg('green'))),
            '=': (lambda s: '= ' + s),
        }
    else:
        side_formatter = {
            '<': (lambda s: '< ' + s),
            '>': (lambda s: '> ' + s),
            '=': (lambda s: '= ' + s),
        }

    for side, line in diff:
        print(side_formatter[side](line), file=file, end='')

TYPE_FLOAT = 0
TYPE_NAN = 1
TYPE_STRING = 2
def natural_key(s):
    def natural_word(s):
        try:
            value = float(s)
        except ValueError:
            return (TYPE_STRING, s)

        if value == value:
            return (TYPE_FLOAT, value)
        else:
            return (TYPE_NAN, None)

    return tuple([natural_word(word) for word in s.split()])

def die(*args):
    print(*args, file=sys.stderr)
    sys.exit(1)

if __name__ == '__main__':
    main()
